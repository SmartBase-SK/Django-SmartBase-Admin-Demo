"""
Django settings for smartshop project.

Generated by 'django-admin startproject' using Django 1.8.17.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import logging
import os
import sys
import base64
import psycopg
from dotenv import load_dotenv

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

PROJECT_DIR = 'project'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

ENVIRONMENT = os.environ.get('ENVIRONMENT', 'dev')
if ENVIRONMENT == "dev":
    # load env from .env file for local docker development
    load_dotenv()

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', '0yihg2z_l4in3^s0@qtc&3n(+5b9+uomlw$q1ah8#qihi%&bs0')
CONTAINER_TYPE = os.environ.get('CONTAINER_TYPE', 'webapp')

if CONTAINER_TYPE == 'celery':
    HIDE_PROGRESS = True
else:
    HIDE_PROGRESS = False

if os.environ.get('IS_TEST', 'false') == 'true' or (
        len(sys.argv) > 1 and sys.argv[1] in ('test', 'behave', 'sb_behave',)):
    IS_TEST = True
else:
    IS_TEST = False

DEBUG_TOOLBAR = False
INTERNAL_IPS = [os.environ.get('INTERNAL_IPS', '127.0.0.1')]

# SECURITY WARNING: don't run with debug turned on in production!
if ENVIRONMENT == 'production':
    DEBUG = False
elif ENVIRONMENT == 'staging':
    DEBUG = True
elif ENVIRONMENT == 'dev':
    DEBUG = True
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s',
        },
        'simple': {
            'format': '%(levelname)s %(asctime)s %(message)s',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': [],
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'email_backend': 'project.config.email_backend.ErrorEmailBackend',
        },

    },
    'loggers': {
        'django': {
            'handlers': ['console'],  # 'mail_admins'
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],  # 'mail_admins'
            'level': 'INFO',
            'propagate': False,
        },
        'sbcore': {
            'handlers': ['console'],  # 'mail_admins'
            'level': 'INFO',
            'propagate': False,
        },
        'project': {
            'handlers': ['console'],  # 'mail_admins'
            'level': 'INFO',
            'propagate': False,
        },
        'cacheback': {
            'handlers': ['console'],  # 'mail_admins'
            'level': 'DEBUG',
            'propagate': False,
        },
    },
    'root': {
        'level': 'INFO',
        'handlers': ['console'],
    }
}

if ENVIRONMENT == 'dev' or ENVIRONMENT == 'staging':
    ALLOWED_HOSTS = ['*']
else:
    #   force overriding allowed hosts on production environment
    ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "").split(" ")

NOCAPTCHA = True

# Application definition
COMMON_INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',

    'django_celery_results',
    'nested_admin',
    'post_office',
    'health_check',  # required
    'health_check.db',  # stock Django health checkers
    'health_check.cache',
    'health_check.storage',
    'health_check.contrib.psutil',  # disk and memory utilization; requires psutil
    'health_check.contrib.rabbitmq',  # requires RabbitMQ broker
    "django_smartbase_admin",
    "dynamic_preferences",
    'dynamic_preferences.users.apps.UserPreferencesConfig',
    'easy_thumbnails',
    'widget_tweaks',
]

if DEBUG_TOOLBAR:
    COMMON_INSTALLED_APPS.append('debug_toolbar')

if ENVIRONMENT == 'production' or ENVIRONMENT == 'staging':
    LOGGING['root'] = {
        'level': 'WARNING',
        'handlers': ['console'],
    }

MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
]

if DEBUG_TOOLBAR:
    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')
if ENVIRONMENT in ('dev', 'staging'):
    MIDDLEWARE = ['pyinstrument.middleware.ProfilerMiddleware'] + MIDDLEWARE


def show_toolbar(request):
    return True


DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": show_toolbar,
}

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)

SB_TEMPLATE_LOADERS = [
]

SB_TEMPLATE_LOADERS_CACHED = [
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
]

if ENVIRONMENT == 'production' or ENVIRONMENT == 'staging':
    SB_TEMPLATE_LOADERS.append(('django.template.loaders.cached.Loader', SB_TEMPLATE_LOADERS_CACHED))
else:
    SB_TEMPLATE_LOADERS += SB_TEMPLATE_LOADERS_CACHED

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'project', 'templates'),
            os.path.join(BASE_DIR, 'templates'),
        ],
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'dynamic_preferences.processors.global_preferences',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
            ],
            'loaders': SB_TEMPLATE_LOADERS,
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

DEFAULT_CACHE_CONFIG = {
    "BACKEND": "django_redis.cache.RedisCache",
    "LOCATION": "redis://{}:{}".format(
        os.environ.get("REDIS_HOST", "127.0.0.1"), os.environ.get("REDIS_PORT", "6379")
    ),
    "OPTIONS": {
        "CONNECTION_POOL_CLASS_KWARGS": {
            "connection_class": "project.config.redis.cache.FailsafeConnection",
        },
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
        "SOCKET_TIMEOUT": 10,
        "SOCKET_CONNECT_TIMEOUT": 2,
    },
}

if ENVIRONMENT == "production" or ENVIRONMENT == "staging":
    if os.environ.get("PGBOUNCER_DISABLED", False):
        DB_HOST = os.environ.get("POSTGRES_HOST")
    else:
        try:
            test_conn = psycopg.connect(
                dbname=os.environ.get("POSTGRES_DB"),
                user=os.environ.get("POSTGRES_USER"),
                password=os.environ.get("POSTGRES_PASSWORD"),
                host=os.environ.get("PGBOUNCER_HOST"),
                port=os.environ.get("POSTGRES_PORT"),
            )
            test_conn.close()
            DB_HOST = os.environ.get("PGBOUNCER_HOST")
        except psycopg.Error:
            print("using db container")
            DB_HOST = os.environ.get("POSTGRES_HOST")

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ.get("POSTGRES_DB"),
            "USER": os.environ.get("POSTGRES_USER"),
            "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
            "HOST": DB_HOST,
            "PORT": os.environ.get("POSTGRES_PORT"),
            "CONN_MAX_AGE": None if DB_HOST == "pgbouncer" else 60,
            "DISABLE_SERVER_SIDE_CURSORS": True,
            "TEST": {
                "NAME": os.environ.get("POSTGRES_DB"),
            },
        }
    }
    CACHES = {
        "default": DEFAULT_CACHE_CONFIG,
        "file_cache": {
            "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
            "LOCATION": "/var/tmp/django_cache",
            "TIMEOUT": None,
            "OPTIONS": {"MAX_ENTRIES": 1000000},
        },
    }

    CACHEOPS_REDIS = {
        "host": os.environ.get("REDIS_HOST"),
        "port": os.environ.get("REDIS_PORT"),
    }
elif ENVIRONMENT == "dev" and bool(os.environ.get("DOCKER_DEV_SETUP", 0)):
    # docker dev setup
    if os.environ.get("PGBOUNCER_DISABLED", False):
        DB_HOST = os.environ.get("POSTGRES_HOST")
    else:
        try:
            test_conn = psycopg.connect(
                dbname=os.environ.get("POSTGRES_DB"),
                user=os.environ.get("POSTGRES_USER"),
                password=os.environ.get("POSTGRES_PASSWORD"),
                host=os.environ.get("PGBOUNCER_HOST"),
                port=os.environ.get("POSTGRES_PORT"),
            )
            test_conn.close()
            DB_HOST = os.environ.get("PGBOUNCER_HOST")
        except psycopg.Error:
            print("using db container")
            DB_HOST = os.environ.get("POSTGRES_HOST")

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ.get("POSTGRES_DB"),
            "USER": os.environ.get("POSTGRES_USER"),
            "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
            "HOST": DB_HOST,
            "PORT": os.environ.get("POSTGRES_PORT"),
            "CONN_MAX_AGE": None if DB_HOST == "pgbouncer" else 60,
            "DISABLE_SERVER_SIDE_CURSORS": True,
        }
    }
    CACHES = {"default": DEFAULT_CACHE_CONFIG}
elif ENVIRONMENT == "dev":
    # vagrant setup
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": "smartshop",
            "USER": "vagrant",
            "PASSWORD": "vagrant",
        }
    }
    CACHES = {"default": DEFAULT_CACHE_CONFIG}

ADMINS = [('SmartBase', 'error@smartbase.sk')]
if ENVIRONMENT == 'dev':
    SERVER_EMAIL = 'smartshop@smartbase.sk'
else:
    if os.environ.get('EMAIL_HOST_USER', '') != '':
        SERVER_EMAIL = os.environ.get('EMAIL_HOST_USER', '')
    elif len(ALLOWED_HOSTS) > 0:
        # dont change info@, because is used on production servers
        SERVER_EMAIL = 'info@' + ALLOWED_HOSTS[0]

DEFAULT_FROM_EMAIL = SERVER_EMAIL
EMAIL_BACKEND = 'project.config.email_backend.EmailAllToAdminBackend'
EMAIL_FILE_PATH = 'email.log'

EMAIL_HOST = os.environ.get('EMAIL_HOST', 'postfix')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
EMAIL_USE_TLS = True if os.environ.get('EMAIL_USE_TLS', False) == 'True' else False
EMAIL_USE_SSL = True if os.environ.get('EMAIL_USE_SSL', False) == 'True' else False
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '25'))
EMAIL_TIMEOUT = 15.0

if ENVIRONMENT == 'production':
    EMAIL_POST_OFFICE_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
elif ENVIRONMENT == 'staging' and not IS_TEST:
    SERVER_EMAIL = os.environ.get('STAGING_SMTP_USER', '')
    DEFAULT_FROM_EMAIL = SERVER_EMAIL
    EMAIL_POST_OFFICE_BACKEND = 'project.config.email_backend.EmailAllToAdminBackend'
    EMAIL_HOST = os.environ.get('STAGING_SMTP_HOST', '')
    EMAIL_HOST_USER = os.environ.get('STAGING_SMTP_USER', '')
    EMAIL_HOST_PASSWORD = base64.b64decode(os.environ.get('STAGING_SMTP_PASSWORD_ENCODED', '')).decode('utf-8')
    EMAIL_USE_TLS = True
    EMAIL_PORT = int(os.environ.get('STAGING_SMTP_PORT', '25'))
elif ENVIRONMENT == 'dev' or IS_TEST:
    EMAIL_POST_OFFICE_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
    EMAIL_FILE_PATH = BASE_DIR + '/emails/'
else:
    EMAIL_POST_OFFICE_BACKEND = 'django.core.mail.backends.console.EmailBackend'

EMAIL_MAX_RETRIES = 5

POST_OFFICE = {
    'DEFAULT_PRIORITY': 'high',
    'BACKENDS': {
        'default': EMAIL_POST_OFFICE_BACKEND,
    },
}
# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

ugettext = lambda s: s

LANGUAGE_CODE = 'en'
LANGUAGES = [
    ('en', 'English'),
]

PARLER_LANGUAGES = {
    1: (
        {'code': 'sk', },
    ),
    'default': {
        'hide_untranslated': False,  # the default; let .active_translations() return fallbacks too.
    }
}
DOMAIN_LANGUAGES = {

}
PARLER_DEFAULT_ACTIVATE = True

LOCALE_PATHS = (os.path.join(BASE_DIR, PROJECT_DIR, 'locale'),)

TIME_ZONE = 'Europe/Bratislava'

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, PROJECT_DIR, "static"),
]
STATIC_URL = "/static/"
# STATIC_ROOT = '/home/vagrant/smartshop/static-files'
# STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'
if not IS_TEST and (ENVIRONMENT == 'production' or ENVIRONMENT == 'staging'):
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

if ENVIRONMENT == 'production' or ENVIRONMENT == 'staging':
    MEDIA_ROOT = '/srv/media-files'
    STATIC_ROOT = '/srv/static-files'
else:
    MEDIA_ROOT = os.path.join(BASE_DIR, PROJECT_DIR, "media")

MEDIA_URL = "/media/"

FILE_UPLOAD_PERMISSIONS = 0o644

SITE_ID = 1

if ENVIRONMENT in ('production', 'staging',):
    SITE_PROTOCOL = 'https'
    META_SITE_PROTOCOL = 'https'
    SOCIAL_AUTH_REDIRECT_IS_HTTPS = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
else:
    SITE_PROTOCOL = 'http'
    META_SITE_PROTOCOL = 'http'

CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'

CONSTANCE_CONFIG = {
}

CONSTANCE_SUPERUSER_ONLY = False

DECIMAL_SEPARATOR = '.'
USE_THOUSAND_SEPARATOR = False

DATA_UPLOAD_MAX_NUMBER_FIELDS = 2000

NOSE_ARGS = ['--nocapture',
             '--nologcapture', ]

VERSION_PATH = 'version.txt'
VERSION_INFO = ""
if os.path.isfile(VERSION_PATH):
    with open(VERSION_PATH) as fh:
        VERSION_INFO = fh.readlines()

try:
    PROJECT_VERSION = VERSION_INFO[3].split(' || ')[2] if VERSION_INFO[3].split(' || ')[2] else \
        VERSION_INFO[3].split(' || ')[1]
    CORE_VERSION = 'no_core'
except Exception:
    CORE_VERSION = ''
    PROJECT_VERSION = ''

BROKER_URL = CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = 'django-db'

# HEALTH CHECK SETTINGS
HEALTH_CHECK = {
    'DISK_USAGE_MAX': 90,  # percent
    'MEMORY_MIN': None,  # in MB
}

TQDM_MININTERVAL = 5

SILENCED_SYSTEM_CHECKS = ["urls.W001"]

INSTALLED_APPS = (
        [
            "project",
            "project.catalog.apps.CatalogConfig",
            "ckeditor_uploader"
        ]
        + COMMON_INSTALLED_APPS
)
SB_ADMIN_CONFIGURATION = "project.sb_admin_configuration.SBAdminConfiguration"

ROOT_URLCONF = "project.urls"
MIDDLEWARE = MIDDLEWARE + [
    'project.middleware.read_only_middleware.ReadOnlyModeMiddleware',
]
if CONTAINER_TYPE != 'celery' and ENVIRONMENT != 'dev':
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ.get("POSTGRES_DB"),
            "USER": os.environ.get("READ_ONLY_POSTGRES_USER"),
            "PASSWORD": os.environ.get("READ_ONLY_POSTGRES_PASSWORD"),
            "HOST": "pgbouncer-redonly",
            "PORT": os.environ.get("POSTGRES_PORT"),
            "CONN_MAX_AGE": 60,
            "DISABLE_SERVER_SIDE_CURSORS": True,
            "TEST": {
                "NAME": os.environ.get("POSTGRES_DB"),
            },
        }
    }

CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_BASEPATH = STATIC_URL+"ckeditor/ckeditor/"
